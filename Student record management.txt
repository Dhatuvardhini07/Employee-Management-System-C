#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100   // Maximum number of students

// Structure for student
struct Student {
    int rollNo;
    char name[50];
    int age;
    float marks;
};

// Function prototypes
void addStudent(struct Student students[], int *count);
void displayStudents(struct Student students[], int count);
void searchStudent(struct Student students[], int count, int rollNo);
void updateStudent(struct Student students[], int count, int rollNo);
void deleteStudent(struct Student students[], int *count, int rollNo);

int main() {
    struct Student students[MAX];
    int count = 0;
    int choice, rollNo;

    while (1) {
        printf("\n=== Student Record Management System ===\n");
        printf("1. Add Student\n");
        printf("2. Display All Students\n");
        printf("3. Search Student by Roll No\n");
        printf("4. Update Student by Roll No\n");
        printf("5. Delete Student by Roll No\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent(students, &count);
                break;
            case 2:
                displayStudents(students, count);
                break;
            case 3:
                printf("Enter Roll No to search: ");
                scanf("%d", &rollNo);
                searchStudent(students, count, rollNo);
                break;
            case 4:
                printf("Enter Roll No to update: ");
                scanf("%d", &rollNo);
                updateStudent(students, count, rollNo);
                break;
            case 5:
                printf("Enter Roll No to delete: ");
                scanf("%d", &rollNo);
                deleteStudent(students, &count, rollNo);
                break;
            case 6:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}

// Function to add a student
void addStudent(struct Student students[], int *count) {
    if (*count >= MAX) {
        printf("Cannot add more students. Storage full!\n");
        return;
    }
    struct Student st;
    printf("Enter Roll No: ");
    scanf("%d", &st.rollNo);
    printf("Enter Name: ");
    scanf("%s", st.name);
    printf("Enter Age: ");
    scanf("%d", &st.age);
    printf("Enter Marks: ");
    scanf("%f", &st.marks);

    students[*count] = st;
    (*count)++;
    printf("Student added successfully!\n");
}

// Function to display all students
void displayStudents(struct Student students[], int count) {
    if (count == 0) {
        printf("No student records to display.\n");
        return;
    }
    printf("\n--- Student List ---\n");
    for (int i = 0; i < count; i++) {
        printf("Roll No: %d | Name: %s | Age: %d | Marks: %.2f\n",
               students[i].rollNo, students[i].name, students[i].age, students[i].marks);
    }
}

// Function to search student by Roll No
void searchStudent(struct Student students[], int count, int rollNo) {
    for (int i = 0; i < count; i++) {
        if (students[i].rollNo == rollNo) {
            printf("Student Found: Roll No=%d | Name=%s | Age=%d | Marks=%.2f\n",
                   students[i].rollNo, students[i].name, students[i].age, students[i].marks);
            return;
        }
    }
    printf("Student with Roll No %d not found.\n", rollNo);
}

// Function to update student by Roll No
void updateStudent(struct Student students[], int count, int rollNo) {
    for (int i = 0; i < count; i++) {
        if (students[i].rollNo == rollNo) {
            printf("Enter new Name: ");
            scanf("%s", students[i].name);
            printf("Enter new Age: ");
            scanf("%d", &students[i].age);
            printf("Enter new Marks: ");
            scanf("%f", &students[i].marks);
            printf("Student record updated successfully!\n");
            return;
        }
    }
    printf("Student with Roll No %d not found.\n", rollNo);
}

// Function to delete student by Roll No
void deleteStudent(struct Student students[], int *count, int rollNo) {
    for (int i = 0; i < *count; i++) {
        if (students[i].rollNo == rollNo) {
            for (int j = i; j < *count - 1; j++) {
                students[j] = students[j + 1];
            }
            (*count)--;
            printf("Student deleted successfully!\n");
            return;
        }
    }
    printf("Student with Roll No %d not found.\n", rollNo);
}
