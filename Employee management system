#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100   // Maximum number of employees

// Structure for employee
struct Employee {
    int id;
    char name[50];
    char dept[30];
    float salary;
};

// Function prototypes
void addEmployee(struct Employee employees[], int *count);
void displayEmployees(struct Employee employees[], int count);
void searchEmployee(struct Employee employees[], int count, int id);
void updateEmployee(struct Employee employees[], int count, int id);
void deleteEmployee(struct Employee employees[], int *count, int id);

int main() {
    struct Employee employees[MAX];
    int count = 0;
    int choice, id;

    while (1) {
        printf("\n=== Employee Management System ===\n");
        printf("1. Add Employee\n");
        printf("2. Display All Employees\n");
        printf("3. Search Employee by ID\n");
        printf("4. Update Employee by ID\n");
        printf("5. Delete Employee by ID\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addEmployee(employees, &count);
                break;
            case 2:
                displayEmployees(employees, count);
                break;
            case 3:
                printf("Enter Employee ID to search: ");
                scanf("%d", &id);
                searchEmployee(employees, count, id);
                break;
            case 4:
                printf("Enter Employee ID to update: ");
                scanf("%d", &id);
                updateEmployee(employees, count, id);
                break;
            case 5:
                printf("Enter Employee ID to delete: ");
                scanf("%d", &id);
                deleteEmployee(employees, &count, id);
                break;
            case 6:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }
    return 0;
}

// Function to add an employee
void addEmployee(struct Employee employees[], int *count) {
    if (*count >= MAX) {
        printf("Cannot add more employees. Storage full!\n");
        return;
    }
    struct Employee emp;
    printf("Enter Employee ID: ");
    scanf("%d", &emp.id);
    printf("Enter Name: ");
    scanf("%s", emp.name);
    printf("Enter Department: ");
    scanf("%s", emp.dept);
    printf("Enter Salary: ");
    scanf("%f", &emp.salary);

    employees[*count] = emp;
    (*count)++;
    printf("Employee added successfully!\n");
}

// Function to display all employees
void displayEmployees(struct Employee employees[], int count) {
    if (count == 0) {
        printf("No employees to display.\n");
        return;
    }
    printf("\n--- Employee List ---\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d | Name: %s | Dept: %s | Salary: %.2f\n",
               employees[i].id, employees[i].name, employees[i].dept, employees[i].salary);
    }
}

// Function to search employee by ID
void searchEmployee(struct Employee employees[], int count, int id) {
    for (int i = 0; i < count; i++) {
        if (employees[i].id == id) {
            printf("Employee Found: ID=%d | Name=%s | Dept=%s | Salary=%.2f\n",
                   employees[i].id, employees[i].name, employees[i].dept, employees[i].salary);
            return;
        }
    }
    printf("Employee with ID %d not found.\n", id);
}

// Function to update employee by ID
void updateEmployee(struct Employee employees[], int count, int id) {
    for (int i = 0; i < count; i++) {
        if (employees[i].id == id) {
            printf("Enter new Name: ");
            scanf("%s", employees[i].name);
            printf("Enter new Department: ");
            scanf("%s", employees[i].dept);
            printf("Enter new Salary: ");
            scanf("%f", &employees[i].salary);
            printf("Employee updated successfully!\n");
            return;
        }
    }
    printf("Employee with ID %d not found.\n", id);
}

// Function to delete employee by ID
void deleteEmployee(struct Employee employees[], int *count, int id) {
    for (int i = 0; i < *count; i++) {
        if (employees[i].id == id) {
            for (int j = i; j < *count - 1; j++) {
                employees[j] = employees[j + 1];
            }
            (*count)--;
            printf("Employee deleted successfully!\n");
            return;
        }
    }
    printf("Employee with ID %d not found.\n", id);
}
